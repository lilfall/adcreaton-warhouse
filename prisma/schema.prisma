// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      String        @id @default(uuid())
  image        String?
  username     String?       @unique
  password     String?
  name         String
  email        String?       @unique
  phone        String?
  creditcard   String?
  position     String?
  role         Role          @default(EMPLOYEE)
  transaction  Transaction[]
  warehouse_id Int?
  warehouse    Warehouse?    @relation(fields: [warehouse_id], references: [warehouse_id])
  inputby      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orders_sales Order[]       @relation("SalesRelation")
}

model Customer {
  customer_id  Int        @id @default(autoincrement())
  name         String
  alamat       String?
  phone        String
  warehouse_id Int
  warehouse    Warehouse  @relation(fields: [warehouse_id], references: [warehouse_id])
  Shipment     Shipment[]
  Order        Order[]
}

model Transaction {
  transaction_id   String      @id @default(uuid())
  transaction_code String
  user_id          String
  sales_name       User        @relation(references: [user_id], fields: [user_id])
  Cart             Cart[]
  total            String
  status           StatusOrder
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Cart {
  cart_id    Int    @id @default(autoincrement())
  product_id String
  quantity   Int
  total      Float

  transaction_id String
  transaction    Transaction @relation(fields: [transaction_id], references: [transaction_id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  order_id    String @id @default(uuid())
  order_code  String @unique
  totalAmount Float?

  OrderItem  OrderItem[]
  sales_id   String?
  sales_name User?       @relation(fields: [sales_id], references: [user_id], name: "SalesRelation")

  customer_id   Int?
  customer_name Customer? @relation(fields: [customer_id], references: [customer_id])

  warehouse_id Int?

  shipment_id String?
  shipment    Shipment? @relation(fields: [shipment_id], references: [shipment_id])

  status    StatusOrder @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Payment   Payment[]
}

model OrderItem {
  order_item_id String  @id @default(uuid())
  quantity      Float
  product_id    String
  product       Product @relation(fields: [product_id], references: [product_id])
  discount      Float?  @default(0)
  satuan_id     Int?
  satuan        Satuan? @relation(fields: [satuan_id], references: [satuan_id])

  notes    String?
  Order    Order?  @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  order_id String?
}

model TierPrice {
  tier_price_id Int     @id @default(autoincrement())
  name          String
  value         Float
  product_id    String
  product       Product @relation(fields: [product_id], references: [product_id])
}

model Inbound {
  inbound_id String    @id @default(uuid())
  product    Product?  @relation(fields: [product_id], references: [product_id], onDelete: SetNull, onUpdate: Cascade)
  quantity   Float
  notes      String
  warehouse  Warehouse @relation(fields: [warehouse_id], references: [warehouse_id])
  confirm    Boolean   @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product_id   String?
  warehouse_id Int
  inputBy      String
}

model Outbound {
  outbound_id String    @id @default(uuid())
  product     Product?  @relation(fields: [product_id], references: [product_id], onDelete: SetNull, onUpdate: Cascade)
  quantity    Float
  notes       String
  warehouse   Warehouse @relation(fields: [warehouse_id], references: [warehouse_id])
  confirm     Boolean   @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product_id   String?
  warehouse_id Int
  inputBy      String
}

model Shipment {
  shipment_id   String         @id @default(uuid())
  shipment_code String         @unique
  origin        Warehouse      @relation(fields: [warehouse_id], references: [warehouse_id])
  destination   Customer?      @relation(fields: [customer_id], references: [customer_id])
  shippedDate   DateTime
  deliveryDate  DateTime?
  warehouse_id  Int
  customer_id   Int?
  note          String?
  order_id      String?
  Order         Order[]
  status        StatusShipment @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Car       Car?     @relation(fields: [car_id], references: [car_id])
  car_id    String?
}

model Car {
  car_id            String     @id @default(uuid())
  foto              String?
  plat_nomor        String
  nama              String?
  tanggal_stnk      String?
  tanggal_pajak     String?
  tanggal_kir       String?
  kelengkapan       String?
  catatan_perbaikan String?
  note              String?
  warehouse_id      Int?
  Warehouse         Warehouse? @relation(fields: [warehouse_id], references: [warehouse_id])
  shipment          Shipment[]
  available         Boolean    @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warehouse {
  warehouse_id Int     @id @default(autoincrement())
  name         String
  location     String
  address      String?
  phone        String?

  customer Customer[]
  stock    Stock[]
  user     User[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Inbound   Inbound[]
  Outbound  Outbound[]
  Shipment  Shipment[]
  Car       Car[]
}

model Product {
  product_id  String  @id @default(uuid())
  image       String
  name        String
  unit        String  @default("pcs")
  sell_price  Float
  buy_price   Float
  tier_price  String?
  description String

  stock       Stock[]
  category_id Int?
  Category    Category? @relation(fields: [category_id], references: [category_id])

  inputby   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItem OrderItem[]
  Inbound   Inbound[]
  Outbound  Outbound[]
  Satuan    Satuan[]
  TierPrice TierPrice[]
}

model Stock {
  stock_id Int @id @default(autoincrement())
  total    Int

  warehouse_id Int
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [warehouse_id])

  product_id String
  product    Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
}

model Payment {
  payment_id String   @id @default(uuid())
  amount     Float
  checked    Boolean  @default(false)
  orderId    String   @unique
  order      Order    @relation(fields: [orderId], references: [order_id])
  inputBy    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Satuan {
  satuan_id  Int    @id @default(autoincrement())
  name       String
  multiplier Int

  product_id String
  product    Product     @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  OrderItem  OrderItem[]
}

model Category {
  category_id Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  Product     Product[]
}

model Setting {
  setting_id      Int     @id @default(autoincrement())
  web_title       String
  web_description String
  web_logo        String
  other           String?
}

enum Role {
  ADMIN
  EMPLOYEE
  SALES
}

enum StatusOrder {
  ARCHIVED
  ON_DELEVERY
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

enum StatusShipment {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELED
}
